name: Language Server Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run at 00:00 UTC every day to catch language server updates
    - cron: '0 0 * * *'

jobs:
  language-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: TypeScript
            setup: |
              npm install -g typescript typescript-language-server
            test: pnpm test:languages:tsgo
          
          - name: Python
            setup: |
              npm install -g pyright
              pip install ruff
            test: pnpm test:languages:python
          
          - name: Rust
            setup: |
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source $HOME/.cargo/env
              rustup component add rust-analyzer
            test: pnpm test:languages:rust
          
          - name: Go
            setup: |
              go install golang.org/x/tools/gopls@latest
              echo "$HOME/go/bin" >> $GITHUB_PATH
            test: vitest run tests/languages/language-tests/go.test.ts
          
          - name: Deno
            setup: |
              curl -fsSL https://deno.land/x/install/install.sh | sh
              echo "$HOME/.deno/bin" >> $GITHUB_PATH
            test: vitest run tests/languages/language-tests/deno.test.ts
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Set up Python
        if: matrix.name == 'Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Set up Go
        if: matrix.name == 'Go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm build
      
      - name: Setup ${{ matrix.name }}
        run: ${{ matrix.setup }}
      
      - name: Test ${{ matrix.name }}
        run: ${{ matrix.test }}
        timeout-minutes: 10
        env:
          CI: true