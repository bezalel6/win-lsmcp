{
  "name": "dap-mcp",
  "description": "Debug Adapter Protocol MCP server for debugging programs",
  "tools": [
    {
      "name": "debug_launch",
      "description": "Launch a new debug session for a program",
      "parameters": {
        "sessionId": "Unique identifier for this debug session",
        "adapter": "Debug adapter to use (e.g., 'node', 'python')",
        "program": "Path to the program to debug",
        "args": "Program arguments (optional)",
        "env": "Environment variables (optional)",
        "cwd": "Working directory (optional)",
        "stopOnEntry": "Stop at program entry point (optional)"
      }
    },
    {
      "name": "debug_attach",
      "description": "Attach to a running process for debugging",
      "parameters": {
        "sessionId": "Unique identifier for this debug session",
        "adapter": "Debug adapter to use",
        "processId": "Process ID to attach to (optional)",
        "port": "Debug port to connect to (optional)",
        "host": "Debug host to connect to (optional)"
      }
    },
    {
      "name": "debug_set_breakpoints",
      "description": "Set breakpoints in a source file",
      "parameters": {
        "sessionId": "Debug session ID",
        "source": "Source file path",
        "lines": "Line numbers for breakpoints",
        "conditions": "Conditional expressions for breakpoints (optional)"
      }
    },
    {
      "name": "debug_continue",
      "description": "Continue execution in debug session"
    },
    {
      "name": "debug_step_over",
      "description": "Step over to the next line"
    },
    {
      "name": "debug_step_into",
      "description": "Step into function call"
    },
    {
      "name": "debug_step_out",
      "description": "Step out of current function"
    },
    {
      "name": "debug_pause",
      "description": "Pause execution in debug session"
    },
    {
      "name": "debug_get_stack_trace",
      "description": "Get the current stack trace"
    },
    {
      "name": "debug_get_variables",
      "description": "Get variables in the current scope"
    },
    {
      "name": "debug_evaluate",
      "description": "Evaluate an expression in the current debug context"
    },
    {
      "name": "debug_list_sessions",
      "description": "List all active debug sessions"
    },
    {
      "name": "debug_disconnect",
      "description": "Disconnect and end a debug session"
    }
  ]
}